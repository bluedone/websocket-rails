{"name":"websocket-rails","google":"UA-27751069-2","tagline":"Plug and play WebSocket support for ruby on rails.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Websocket-Rails\r\n\r\n[![Build Status](https://secure.travis-ci.org/DanKnox/websocket-rails.png)](https://secure.travis-ci.org/DanKnox/websocket-rails)\r\n\r\n**Now with streaming HTTP support for improved browser compatibility**\r\n\r\n## The Present\r\n\r\nStart treating client side events as first class citizens inside your Rails application with a built in WebSocket server. Sure, WebSockets aren't quite universal yet. That's why we also support streaming HTTP. Oh, and if you don't mind running a separate process, you can support just about any browser through Flash sockets without changing a line of code.\r\n\r\n## The Future\r\n\r\nThe long term goal for this project is simple. Reduce the need to move application logic on to the client while still providing the same level of interaction and responsiveness users have grown to expect from a modern web application. We hope to isolate the responsibility of JavaScript to the presentation layer and keep business logic nicely organized on the server.\r\n\r\n## A Brief Tour\r\n\r\nMap events to controller actions using an Event Router.\r\n\r\n````ruby\r\nWebsocketRails::EventMap.describe do\r\n  namespace :tasks do\r\n    subscribe :create, :to => TaskController, :with_method => :create\r\n  end\r\nend\r\n````\r\n\r\nTrigger events using our JavaScript client.\r\n\r\n````javascript\r\nvar task = {\r\n  name: 'Start taking advantage of WebSockets',\r\n  completed: false\r\n}\r\ndispatcher = new WebSocketRails('localhost:3000/websocket');\r\ndispatcher.trigger('tasks.create', task);\r\n````\r\n\r\nHandle events in your controller.\r\n\r\n````ruby\r\nclass TaskController < WebsocketRails::BaseController\r\n  def create\r\n    # The `message` method contains the data received\r\n    task = Task.new message\r\n    if task.save\r\n      send_message :create_successful, task\r\n    else\r\n      send_message :create_failed, task\r\n    end\r\n  end\r\nend\r\n````\r\n\r\nReceive the response in the client.\r\n\r\n````javascript\r\ndispatcher.bind('tasks.create_successful', function(task) {\r\n  console.log('successfully created ' + task.name);\r\n});\r\n````\r\n\r\n## Channel Support\r\n\r\nKeep your users up to date without waiting for them to refresh the page. Subscribe them to a channel and update it from wherever you please.\r\n\r\nTune in on the client side.\r\n\r\n````javascript\r\nchannel = dispatcher.subscribe('posts');\r\nchannel.bind('new', function(post) {\r\n  console.log('a new post about '+post.title+' arrived!');\r\n});\r\n````\r\n\r\nBroadcast to the channel from anywhere inside your Rails application. An existing controller, a model, a background job, or a new WebsocketRails controller.\r\n\r\n````ruby\r\nlatest_post = Post.latest\r\nWebsocketRails[:posts].trigger('new', latest_post)\r\n````\r\n\r\n## Development\r\n\r\nThis gem is created and maintained by Dan Knox and Kyle Whalen under the MIT License.\r\n\r\nBrought to you by:\r\n\r\nThree Dot Loft LLC"}